global-variables:
  vault-image: &vault-image docker.digital.homeoffice.gov.uk/dq/dq-vault-awscli:1.43
  trivy-image: &trivy-image quay.io/ukhomeofficedigital/trivyscanner:master
  kd-image: &kd-image quay.io/ukhomeofficedigital/kd

kind: pipeline
name: default
type: kubernetes

platform:
  os: linux
  arch: amd64

x-anchors:
  rotate-app-user-aws-key: &rotate-app-user-aws-key
      # Retrive vault secrets
    - vault read aws_dacc_dq/creds/drone > aws_creds.json
    - export LEASE_ID=$(cat aws_creds.json | grep lease_id | awk -F ' ' '{print $2}')
    # Update the token TTL to 10mins
    - vault lease renew -increment=600 $${LEASE_ID}
    # Get the AWS credentials
    - export AWS_ACCESS_KEY_ID=$(cat aws_creds.json | grep access_key | awk -F ' ' '{print $2}')
    - export AWS_SECRET_ACCESS_KEY=$(cat aws_creds.json | grep secret_key | awk -F ' ' '{print $2}')
    - export AWS_DEFAULT_REGION=eu-west-2
    # Since AWS is eventually consistent we need to sleep a little while so the AWS key is created and made available
    - sleep 10
    # get app key id from ssm
    - export OLD_AWS_ACCESS_KEY_ID=$(aws ssm get-parameters --name $SSM_KEY_ID --query "Parameters[*].{Value:Value}" --with-decryption | grep Value | awk -F ' ' '{print $2}' | tr -d '"')
    # generate new key & id for app user
    - aws iam create-access-key --user-name $APP_USER_NAME > new-key.json
    - export NEW_AWS_ACCESS_KEY_ID=$(cat new-key.json | grep AccessKeyId | awk -F ' ' '{print $2}' | tr -d '"' | tr -d ',')
    - export NEW_AWS_SECRET_ACCESS_KEY=$(cat new-key.json | grep SecretAccessKey | awk -F ' ' '{print $2}' | tr -d '"' | tr -d ',')
    # push new key & id to SSM
    - aws ssm put-parameter --name $SSM_KEY_ID --type "SecureString" --value $NEW_AWS_ACCESS_KEY_ID --overwrite
    - aws ssm put-parameter --name $SSM_SECURE_KEY --type "SecureString" --value $NEW_AWS_SECRET_ACCESS_KEY --overwrite
    # delete old iam key &id
    - aws iam delete-access-key --access-key-id $OLD_AWS_ACCESS_KEY_ID --user-name $APP_USER_NAME
    # encode new key and id
    - echo "export NEW_AWS_ACCESS_KEY_ID=$(echo -n $NEW_AWS_ACCESS_KEY_ID | base64)" > new_iam_secret.sh
    - echo "export NEW_AWS_SECRET_ACCESS_KEY=$(echo -n $NEW_AWS_SECRET_ACCESS_KEY | base64)" >> new_iam_secret.sh

  retrieve-acp-aws-secrets: &retrieve-acp-aws-secrets
    # Retrive vault secrets
    - vault read secret/dacc/dq/aws/acp/iam/$AWS_ID > aws_id.json
    - GA_S3_ACCESS_KEY_ID=$(cat aws_id.json | grep access_key | awk -F ' ' '{print $2}')
    - GA_S3_ACCESS_KEY_ID=$(echo -n $GA_S3_ACCESS_KEY_ID | base64)
    - echo "export GA_S3_ACCESS_KEY_ID=$GA_S3_ACCESS_KEY_ID" > acp_keys.sh
    - vault read secret/dacc/dq/aws/acp/iam/$AWS_KEY > aws_key.json
    - GA_S3_SECRET_ACCESS_KEY=$(cat aws_key.json | grep secret_access | awk -F ' ' '{print $2}')
    - GA_S3_SECRET_ACCESS_KEY=$(echo -n $GA_S3_SECRET_ACCESS_KEY | base64)
    - echo "export GA_S3_SECRET_ACCESS_KEY=$GA_S3_SECRET_ACCESS_KEY" >> acp_keys.sh

  deploy-to-k8s: &deploy-to-k8s
    - source acp_keys.sh
    - source new_iam_secret.sh
    - kd --delete --file kube/deployment.yml
    - kd -f kube/pvc.yml -f kube/secret.yml -f kube/deployment.yml

steps:
- name: build
  pull: if-not-exists
  image: plugins/docker
  settings:
    context: app
    dockerfile: app/Dockerfile
    force_tag: true
    registry: quay.io
    repo: quay.io/ukhomeofficedigital/dq-nats-sftp-python
    tags:
    - ${DRONE_COMMIT_SHA}
    - ${DRONE_BUILD_NUMBER}
  environment:
    DOCKER_PASSWORD:
      from_secret: docker_password
    DOCKER_USERNAME:
      from_secret: docker_username
  when:
    event:
    - push

- name: trivy_scan
  pull: if-not-exists
  image: *trivy-image
  commands:
  - trivy image --ignore-unfixed --exit-code 0 --no-progress quay.io/ukhomeofficedigital/dq-nats-sftp-python:${DRONE_COMMIT_SHA}
  when:
    branch:
      exclude:
      - master
    event:
    - push

- name: retrieve_acp_secrets_dev
  pull: if-not-exists
  image: *vault-image
  commands:
    *retrieve-acp-aws-secrets
  environment:
    AWS_ID: ga-s3-access-key-id
    AWS_KEY: ga-s3-secret-access-key
    VAULT_ADDR:
      from_secret: VAULT_ADDR_NOTPROD
    VAULT_TOKEN:
      from_secret: VAULT_TOKEN_NOTPROD
  when:
    event:
    - push

- name: rotate_aws_keys_dev
  pull: if-not-exists
  image: *vault-image
  commands:
    *rotate-app-user-aws-key
  environment:
    SSM_KEY_ID: nats-user-id-apps-notprod-dq
    SSM_SECURE_KEY: nats-user-key-apps-notprod-dq
    APP_USER_NAME: iam-user-nats-apps-notprod-dq
    ENV: notprod
    VAULT_ADDR:
      from_secret: VAULT_ADDR_NOTPROD
    VAULT_TOKEN:
      from_secret: VAULT_TOKEN_NOTPROD
  when:
    event:
      - push

- name: deploy_to_dev
  pull: if-not-exists
  image: *kd-image
  commands:
    *deploy-to-k8s
  environment:
    INSECURE_SKIP_TLS_VERIFY: true
    KUBE_NAMESPACE: dq-apps-notprod
    NATS_CPU_LIMIT: 1.5
    NATS_CPU_REQUEST: 1
    NATS_PVC_SIZE: 1Gi
    NATS_RAM_LIMIT: 1.5Gi
    NATS_RAM_REQUEST: 1Gi
    GA_S3_BUCKET_NAME:
      from_secret: NOTPROD_GA_S3_BUCKET_NAME
    GA_S3_KEY_PREFIX:
      from_secret: NOTPROD_GA_S3_KEY_PREFIX
    KUBE_SERVER:
      from_secret: NOTPROD_KUBE_SERVER
    KUBE_TOKEN:
      from_secret: NOTPROD_KUBE_TOKEN
    # S3_ACCESS_KEY_ID:
    #   from_secret: NOTPROD_S3_ACCESS_KEY_ID
    S3_BUCKET_NAME:
      from_secret: NOTPROD_S3_BUCKET_NAME
    S3_KEY_PREFIX:
      from_secret: NOTPROD_S3_KEY_PREFIX
    # S3_SECRET_ACCESS_KEY:
    #   from_secret: NOTPROD_S3_SECRET_ACCESS_KEY
    SLACK_WEBHOOK:
      from_secret: NOTPROD_SLACK_WEBHOOK
    SSH_LANDING_DIR:
      from_secret: NOTPROD_SSH_LANDING_DIR
    SSH_PRIVATE_KEY:
      from_secret: NOTPROD_SSH_PRIVATE_KEY
    SSH_PRIVATE_KEY_PATH:
      from_secret: NOTPROD_SSH_PRIVATE_KEY_PATH
    SSH_REMOTE_HOST:
      from_secret: NOTPROD_SSH_REMOTE_HOST
    SSH_REMOTE_USER:
      from_secret: NOTPROD_SSH_REMOTE_USER
  when:
    event:
    - push

- name: retrieve_acp_secrets_prod
  pull: if-not-exists
  image: *vault-image
  commands:
    *retrieve-acp-aws-secrets
  environment:
    AWS_ID: ga-s3-access-key-id
    AWS_KEY: ga-s3-secret-access-key
    VAULT_ADDR:
      from_secret: VAULT_ADDR_PROD
    VAULT_TOKEN:
      from_secret: VAULT_TOKEN_PROD
  when:
    branch:
    - master
    event:
    - promote
    target:
    - production

- name: rotate_aws_keys_prod
  pull: if-not-exists
  image: *vault-image
  commands:
    *rotate-app-user-aws-key
  environment:
    SSM_KEY_ID: nats-user-id-apps-prod-dq
    SSM_SECURE_KEY: nats-user-key-apps-prod-dq
    APP_USER_NAME: iam-user-nats-apps-prod-dq
    ENV: prod
    VAULT_ADDR:
      from_secret: VAULT_ADDR_PROD
    VAULT_TOKEN:
      from_secret: VAULT_TOKEN_PROD
  when:
    branch:
    - master
    event:
    - promote
    target:
    - production

- name: deploy_to_production
  pull: if-not-exists
  image: *kd-image
  commands:
    *deploy-to-k8s
  environment:
    INSECURE_SKIP_TLS_VERIFY: true
    KUBE_NAMESPACE: dq-apps
    NATS_CPU_LIMIT: 2.5
    NATS_CPU_REQUEST: 2
    NATS_PVC_SIZE: 5Gi
    NATS_RAM_LIMIT: 4Gi
    NATS_RAM_REQUEST: 3Gi
    GA_S3_BUCKET_NAME:
      from_secret: PROD_GA_S3_BUCKET_NAME
    GA_S3_KEY_PREFIX:
      from_secret: PROD_GA_S3_KEY_PREFIX
    KUBE_SERVER:
      from_secret: PROD_KUBE_SERVER
    KUBE_TOKEN:
      from_secret: PROD_KUBE_TOKEN
    S3_ACCESS_KEY_ID:
      from_secret: PROD_S3_ACCESS_KEY_ID
    S3_BUCKET_NAME:
      from_secret: PROD_S3_BUCKET_NAME
    S3_KEY_PREFIX:
      from_secret: PROD_S3_KEY_PREFIX
    S3_SECRET_ACCESS_KEY:
      from_secret: PROD_S3_SECRET_ACCESS_KEY
    SLACK_WEBHOOK:
      from_secret: PROD_SLACK_WEBHOOK
    SSH_LANDING_DIR:
      from_secret: PROD_SSH_LANDING_DIR
    SSH_PRIVATE_KEY:
      from_secret: PROD_SSH_PRIVATE_KEY
    SSH_PRIVATE_KEY_PATH:
      from_secret: PROD_SSH_PRIVATE_KEY_PATH
    SSH_REMOTE_HOST:
      from_secret: PROD_SSH_REMOTE_HOST
    SSH_REMOTE_USER:
      from_secret: PROD_SSH_REMOTE_USER
  when:
    branch:
    - master
    event:
    - promote
    target:
    - production

- name: renew-vault-tokens
  pull: if-not-exists
  image: *vault-image
  commands:
    # Renew NotProd Drone Vault Token
    - export VAULT_TOKEN=$${VAULT_TOKEN_NOTPROD}
    - export VAULT_ADDR=$${VAULT_ADDR_NOTPROD}
    - vault token renew > /dev/null
    # Renew Prod Drone Vault Token
    - export VAULT_TOKEN=$${VAULT_TOKEN_PROD}
    - export VAULT_ADDR=$${VAULT_ADDR_PROD}
    - vault token renew > /dev/null
  environment:
    VAULT_ADDR_NOTPROD:
      from_secret: VAULT_ADDR_NOTPROD
    VAULT_TOKEN_NOTPROD:
      from_secret: VAULT_TOKEN_NOTPROD
    VAULT_ADDR_PROD:
      from_secret: VAULT_ADDR_PROD
    VAULT_TOKEN_PROD:
      from_secret: VAULT_TOKEN_PROD
  when:
    event:
      - cron
    cron:
      - renew-vault-tokens

services:
  - name: docker
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind
